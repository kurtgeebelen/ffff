*****************
EKF User Guide
*****************

In this section, the general guideline of using the EKF will be
presented. The theoretical background of EKF is not the concern of this
documentation, since there are a lot of references on-line for this
purpose, like the
`WiKi <https://en.wikipedia.org/wiki/Extended_Kalman_filter>`_. The
following guideline will mainly focus on the general workflow to use
this EKF class. Meanwhile, some internal designs of the filter class
will be explained and some suggestions for practical implementation will
be given.

Events and EventBuffer
=========================

TODO

Workflow
==========

The EKF filter can be used for both on-line and off-line applications.
The work flow can be very similar for both cases. The general steps will
be described in following sub-sections. Users can also refer to the AGV
example for detailed implementation code.

Model Derivation
-----------------

(See Part 1 in *example_agv.py*)

1. Casadi

In order to run an EKF filter, the system model and observation models
(sensor models) are required. For the OASE toolbox, users need to derive
those models using `Casadi <https://web.casadi.org/>`_. By using the
symbolic Casadi functions, the derivation of Jacobean matrix can be done
automatically. Meanwhile, the C code generated by Casadi will be more
efficient than Python code, thus the calculation cost of the EKF filter
is very low.

The use of Casadi is not in the scope of this document. Users can refer
to the Casadi documentation in case you are not familiar with this
package.

Using Casadi, the following two kinds of functions need to be derived.

2. System Model

The system model describe the behaviour of a dynamic system. It can be
derived in two basic forms, including:

* system dynamic function: *Xdot = fc(X, U)*

* system propagation function: *X1 = f(X, U, dt)*

where: *X* is the system states, U is the control input, *dt* is the
time step, *Xdot* is the time derivatives of the states, and *X1* is the
new states after *dt*.

The user can choose which form to use based our their preference. The
toolbox will add additional integration step to derived the system
propagation function automatically if the system dynamic function if
provided by the user.

The control input is assumed to be noisy. The covariance matrix is
required to run the filter, which will be explained later. Meanwhile,
the user can also add processing noise to the system. For example, in
the case of additive processing noise:

    *Xdot = fc(X, U) + W*

where *W* is the processing noise vector.

To extend the applicability of the toolbox, the user can use a more
general form of system model, as:

    *Xdot = fc(X, U, W)*

In this case, the processing noise is not required to be additive, i.e.,
nonlinear relations between the *W* and *Xdot* can also be defined.

Similar as before, the system propagation function with processing noise
can also be use, as:

    *X1 = f(X, U, W, dt)*

All four kinds of system model mentioned above can be used in this
toolbox. 

3. Observation Model

The observation function(s) defines the relation between system states
and observations, which is normally a set of sensor data, such as the
distance reported by a 1D Lidar. It should be in the following form:

    *z = h(X[, param])*

where *param* is the optional input parameters.

The use of an optional *param* argument is to generalize the observation
functions. By providing different *param*, the same function can be used
for multiple sensor data. For example, in the case of UWB, the *param*
can be location of different anchors, then the same function will be
used for all anchors.

Initialize EKF
---------------

(See Part 3 in *example_agv.py*)



1. Initialize Filter Object


2. Add Observation Function(s)


3. Initial Conditions


Run the Filter
----------------

(See Part 4 in *example_agv.py*)

1. Feed Data

2. Get Estimation

3. Off-line Application


Post-process 
---------------

(See Part 5 in *example_agv.py* (In progress))

1. Backward Smooth 

2. EventPlot Class


Known Issues
=================

TODO
